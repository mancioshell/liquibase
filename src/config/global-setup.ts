import "reflect-metadata";
import { PostgreSqlContainer } from "@testcontainers/postgresql";
import { Client } from "pg";
import type { TestProject } from "vitest/node";

declare module "vitest" {
  interface DatabaseConfig {
    host: string;
    port: number;
    username: string;
    password: string;
    database: string | undefined;
  }

  export interface ProvidedContext {
    prodConfig: DatabaseConfig;
    qaConfig: DatabaseConfig;
    devConfig: DatabaseConfig;
    localConfig: DatabaseConfig;
  }
}

const CREATE_USER_QUERY = `CREATE TABLE "public"."user" ("id" INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL, "firstName" VARCHAR(100) NOT NULL, "lastName" VARCHAR(100) NOT NULL, "age" INTEGER NOT NULL, "email" TEXT NOT NULL, CONSTRAINT "PK_cace4a159ff9f2512dd42373760" PRIMARY KEY ("id"))`;
const CREATE_PERSON_QUERY = `CREATE TABLE "public"."person" ("id" SERIAL NOT NULL, "firstName" character varying(100) NOT NULL, "lastName" character varying(100) NOT NULL, "age" INTEGER NOT NULL, "gender" text NOT NULL, CONSTRAINT "PK_5fdaf670315c4b7e70cce85daa3" PRIMARY KEY ("id"))`;

async function getDatabase(queries: string[]) {
  const container = await new PostgreSqlContainer(
    "postgres:18-alpine3.21"
  ).start();
  let client = new Client({
    connectionString: container.getConnectionUri(),
  });
  await client.connect();

  for (const query of queries) {
    await client.query(query);
  }

  await client.end();

  return {
    config: {
      host: "localhost",
      port: container.getPort(),
      username: container.getUsername(),
      password: container.getPassword(),
      database: container.getDatabase(),
    },
    container,
  };
}

export default async function setup(project: TestProject) {
  console.log("setup: setting up postgres containers");

  let queries = [CREATE_USER_QUERY, CREATE_PERSON_QUERY];
  let containers = [];

  let dev = await getDatabase(queries);
  project.provide("devConfig", dev.config);
  containers.push(dev.container);

  let qa = await getDatabase(queries);
  project.provide("qaConfig", qa.config);
  containers.push(qa.container);

  let prod = await getDatabase(queries);
  project.provide("prodConfig", prod.config);
  containers.push(prod.container);

  let local = await getDatabase([]);
  project.provide("localConfig", local.config);
  containers.push(local.container);

  // return the teardown function to clean up
  return function teardown() {
    console.log("*** teardown -- stopping postgres containers");
    containers.forEach((container) => {
      container
        .stop()
        .then(() => console.log("*** teardown -- container stopped"));
    });
  };
}
